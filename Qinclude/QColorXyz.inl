//------------------------------------------------------------------------------------------------------------------
inline ColorXyz::operator float* ()
{
    return m_afTuple;
}
//------------------------------------------------------------------------------------------------------------------
inline ColorXyz::operator const float* () const
{
    return m_afTuple;
}
//------------------------------------------------------------------------------------------------------------------
inline float& ColorXyz::operator[] (int i)
{
    assert( 0 <= i && i <= 2 );
    return m_afTuple[i];
}
//------------------------------------------------------------------------------------------------------------------
inline float ColorXyz::operator[] (int i) const
{
    assert( 0 <= i && i <= 2 );
    return m_afTuple[i];
}
//------------------------------------------------------------------------------------------------------------------
inline float ColorXyz::X () const
{
    return m_afTuple[0];
}
//------------------------------------------------------------------------------------------------------------------
inline float& ColorXyz::X ()
{
    return m_afTuple[0];
}
//------------------------------------------------------------------------------------------------------------------
inline float ColorXyz::Y () const
{
    return m_afTuple[1];
}
//------------------------------------------------------------------------------------------------------------------
inline float& ColorXyz::Y ()
{
    return m_afTuple[1];
}
//------------------------------------------------------------------------------------------------------------------
inline float ColorXyz::Z () const
{
    return m_afTuple[2];
}
//------------------------------------------------------------------------------------------------------------------
inline float& ColorXyz::Z ()
{
    return m_afTuple[2];
}
//------------------------------------------------------------------------------------------------------------------



